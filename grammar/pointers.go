package main

import "fmt"

// Go 拥有指针。指针保存了值的内存地址
func main()  {
	i, j := 42, 2048

	// & 操作符会生成一个指向其操作数的指针
	p := &i		// 变量 p 指向变量 i
	fmt.Println(p)		// 如果直接使用变量p，则拿到的是变量 i 的内存地址，而不是具体的值
	// * 操作符表示指针指向的底层值
	fmt.Println(*p)		// 通过指针 p 读取 i
	// 因为变量p 和变量i 是同一个内存地址，所以当修改其地层值时，自然也会影响到变量i
	*p = 21				// 通过指针 p 设置 i
	fmt.Println(i)

	// 把变量j 的内存地址赋值给变量 p
	p = &j		// 变量 p 指向变量 j
	// 通过指针对变量j 进行修改
	*p = *p /2  // 通过指针对j 进行除法运算
	fmt.Println(j)
}